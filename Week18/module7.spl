print "module7";

////////////////////////////////////////////////////////
//load console interrupt 
loadi(8, 21);
loadi(9, 22);

//load int6
loadi(14, 27);
loadi(15, 28);

//load module0(Terminal Handling)
loadi(40, 53);
loadi(41, 54);

//load module4(device manager)
loadi(48, 61);
loadi(49, 62);

//load init program
loadi(65, 7);
loadi(66, 8);

//load library module
loadi(63, 13);
loadi(64, 14);

//load int10 program
loadi(22, 35);
loadi(23, 36);

//load exception handler
loadi(2, 15);
loadi(2, 16);

//load timer interrupt
loadi(4, 17);
loadi(5, 18);

//load disk interrupt
loadi(6, 19);
loadi(7, 20);

//load int7
loadi(16, 29);
loadi(17, 30);

// load int9
loadi(20, 33);
loadi(21, 34);

// load module1(process manager) 
loadi(42, 55);
loadi(43, 56);

// load module2(memory manager)
loadi(44, 57);
loadi(45, 58);

// load inode table 
loadi(59, 3);
loadi(60, 4);
///////////////////////////////////////////////

//(init)
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";

//Code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1';
[PTBR + 15] = "0000";

//Stack
[PTBR + 16] = 76;
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

//process table for init process
[PROCESS_TABLE + 16 + 14] = PTBR;
[PROCESS_TABLE + 16 + 15] = PTLR;
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 11] = 80;

//set init process as created
[PROCESS_TABLE + 16 + 4] = CREATED;

[76 * 512] = [65 * 512 + 1];

//initialize state fiels of all other process as terminated
[PROCESS_TABLE + (16*2) + 4] = TERMINATED;
[PROCESS_TABLE + (16*3) + 4] = TERMINATED;
[PROCESS_TABLE + (16*4) + 4] = TERMINATED;
[PROCESS_TABLE + (16*5) + 4] = TERMINATED;
[PROCESS_TABLE + (16*6) + 4] = TERMINATED;
[PROCESS_TABLE + (16*7) + 4] = TERMINATED;
[PROCESS_TABLE + (16*8) + 4] = TERMINATED;
[PROCESS_TABLE + (16*9) + 4] = TERMINATED;
[PROCESS_TABLE + (16*10) + 4] = TERMINATED;
[PROCESS_TABLE + (16*11) + 4] = TERMINATED;
[PROCESS_TABLE + (16*12) + 4] = TERMINATED;
[PROCESS_TABLE + (16*13) + 4] = TERMINATED;
[PROCESS_TABLE + (16*14) + 4] = TERMINATED;
[PROCESS_TABLE + (16*15) + 4] = TERMINATED;
////////////////////////////////////////////////////////////

//memory free list with value 1 for pages used and 0 for free pages
alias i R0;
i = 0;
while(i < 128) do
	if(i <= 82) then
		[MEMORY_FREE_LIST + i] = 1;
	else 
		[MEMORY_FREE_LIST + i] = 0;
	endif;
	i = i + 1;
endwhile;
///////////////////////////////////////////////////////////////////

[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;

// initialize per process resource table for init/////////////////
alias index R1;
//last 16 words of user area page
index = [(PROCESS_TABLE + 16) + 11] * 512 + (512 - 16);
i = 0;
while(i < 16) do   
	[index] = -1;
	index = index + 1;
	i = i + 1;
endwhile;
/////////////////////////////////////////////////////////////////

[SYSTEM_STATUS_TABLE + 3] = 0; //WAIT_MEM_COUNT 
[SYSTEM_STATUS_TABLE + 2] = (128-1) - 82; //MEM_FREE_COUNT

print "mod7 done";

return;
