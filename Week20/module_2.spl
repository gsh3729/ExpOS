//memory_module
alias functionNum R1;
alias pageno R2;

//get_free_page
if(functionNum==1) then
   [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;
   
   while([SYSTEM_STATUS_TABLE+2]==0) do
   [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_MEM;
   multipush(R0,R1,R2,R3,R4,R5);
   call MOD_5;
   multipop(R0,R1,R2,R3,R4,R5);
   endwhile;
  
   [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;
   [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;

  alias temp R3;
      temp=0;
  while(temp<128) do
      if([MEMORY_FREE_LIST+temp]==0) then
          R0=temp;
         [MEMORY_FREE_LIST+temp]=1;
          return;
      endif;
    temp=temp+1;
  endwhile;
endif;


//release_page
if(functionNum==2) then
  [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2]-1;
  if([MEMORY_FREE_LIST + R2]==0) then
    [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]+1;
    alias counter R0;
    counter=0;
    while ( counter<=15 ) do
      if ([PROCESS_TABLE + (counter * 16) + 4] == WAIT_MEM) then
        [PROCESS_TABLE + (counter * 16) + 4] = READY;
      endif;
      counter = counter +1;
    endwhile;
    endif;
  return;
endif;

//get_code_page
if(functionNum==5)then
  alias ProcessCounter R3;
  alias DiskCounter R4;
  ProcessCounter=1;

  //check DiskMapTable of all process
  while (ProcessCounter<=15) do
    DiskCounter=0;
    while (DiskCounter<=9) do
      if ([DISK_MAP_TABLE + ProcessCounter*10 + DiskCounter]==R2) then
          alias ptbr R5;
          ptbr = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20;
          if([ptbr +DiskCounter*2 +1]=='0100' || [ptbr +DiskCounter*2 +1]=='1100' ) then
            R0=[ptbr +DiskCounter*2];
            [MEMORY_FREE_LIST + R0]=[MEMORY_FREE_LIST + R0]+1;
            return;
          endif;
      endif;
      DiskCounter=DiskCounter+1;
    endwhile;
    ProcessCounter=ProcessCounter+1;
  endwhile;

  //get_free_page
  multipush(R1,R2,R3,R4,R5);
  R1=1;
  call MOD_2;
  multipop(R1,R2,R3,R4,R5);

  //disk_load
  multipush(R0,R1,R2,R3,R4,R5);
  R4=R2;
  R1=2;
  R2=[SYSTEM_STATUS_TABLE+1];
  R3=R0;
  call MOD_4;
  multipop(R0,R1,R2,R3,R4,R5);
  return;
endif;

//Release_Block
if(functionNum==4)then
  [DISK_FREE_LIST+R2]=[DISK_FREE_LIST+R2]-1;
  return;
endif;

return;

