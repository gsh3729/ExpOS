print("exp hand");
//MODE FLAG to -1 
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9]=-1;

//switch to kernal stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

//push EIP onto the stack
multipush(EIP);

PTLR=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 15];

//cause is other than page fault (or)
//if the user stack is full (when userSP is PTLR*512-1, the return address can't be pushed onto the stack)
if (EC!=0 || [PROCESS_TABLE +([SYSTEM_STATUS_TABLE+1] * 16) + 13 == PTLR*512-1]) then
	if(EC==1) then 
		print("Illegal instruction");
	else if(EC==2) then
		print("Illegal memory access");
	else if(EC==3) then
		print("Arthimetic Exception");
	endif;
	endif;
	endif;

	//Exit process()//////////////////////////////////////
	//multipush(R0,R1,R2,R3);
    R1=3;
    R2=[SYSTEM_STATUS_TABLE+1];
    call MOD_1;
    //multipop(R0,R1,R2,R3);
    //////////////////////////////////////////////////////

    //schedule another process
    call MOD_5;
    return;
endif;    


//page fault is caused due to a code page
if (4<=EPN && EPN<8) then
	print("code fault");
	//Get Code Page///////////////////////////////////////////
	//multipush(R0,R1,R2,R3);
	R1=5;
	//get the code block number to be loaded from the disk map table
	R2=[DISK_MAP_TABLE +[SYSTEM_STATUS_TABLE+1]*10+ EPN];
	call MOD_2;

	//set the page number to memory page obtained from Get Code Page function and auxiliary information to "1100"
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2]=R0;
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2+1]="1100";
	//print(R0); //is it inside or outside pop
	//multipop(R0,R1,R2,R3);
endif;



//page fault is caused due to a heap page
if (EPN<4 && EPN>1)then
	print("heap fault");
	//Get Free Page
	//multipush(R0,R1,R2,R3);
	R1=1;
	call MOD_2;

	//set the page number to memory page obtained from Get Free Page function and auxiliary information to "1110"
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2]=R0;
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2+1]="1110";
	//multipop(R0,R1,R2,R3);
endif;


//Mode flag to 0
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;

//Pop EIP from the stack and restore the register context
multipop(EIP);
restore;

//Change to the user stack
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

// Increment the stack pointer
SP=SP+1;

//store the EIP value onto the location pointed to by SP and return to the user mode
//(Address translations needs to be done on the SP to find the stack address to which EIP is to be stored)
[[PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + 2*SP /512]* 512 + SP%512] = EIP;
print("exp done");
ireturn;