alias functionNum R1;

print "mod2";
// Get Free Page()==>Free page Number///////////////////////////////////////////////////	
if(functionNum == 1) then

	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1; // Increment WAIT_MEM_COUNT

	// while memory is full
	while([SYSTEM_STATUS_TABLE + 2] == 0) do
		// this process will be blocked
		[(PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1]) + 4] = WAIT_MEM;

		// Schedule other process by invoking the context switch module
		multipush(R1);
		call MOD_5;
		multipop(R1);

	endwhile;

	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1; // Decrement WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1; // Decrement MEM_FREE_COUNT

	// Finding a free page 
	alias i R2;
	i = 83;
	while(i < 128) do
		if([MEMORY_FREE_LIST + i] == 0) then
			[MEMORY_FREE_LIST + i] = 1;
			break;
		endif;
		i = i + 1;
	endwhile;

	// store return value in R0
	alias retVal R0;
	retVal = i;
/////////////////////////////////////////////////////////////////////////////////

// Release Page(page num)==>NIL////////////////////////////////////////////////
else if(functionNum == 2) then
	print("rel page");
	alias page_number R2;
	[MEMORY_FREE_LIST + page_number] = [MEMORY_FREE_LIST + page_number] - 1;  // Decrement memory free list

	if([MEMORY_FREE_LIST + page_number] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;  // increment FREE_MEM_COUNT
	endif;

	// Update the STATUS to READY which are WAIT_MEM
	alias i R3;
	i = 0;
	while(i < MAX_PROC_NUM) do
		if([(PROCESS_TABLE + 16*i) + 4] == WAIT_MEM) then
			[(PROCESS_TABLE + 16*i) + 4] = READY;
		endif;
		i = i + 1;
	endwhile;
/////////////////////////////////////////////////////////////////////////


//Get Code Page(Block Number)==>Page Number//////////////
else if(functionNum == 5) then
	print("get code");
	alias block_number R2;
	alias process R3;
	alias i R4;
	process = 1;

	print("VP");
  	//Check the disk map table entries of all the processes
  	while (process<=15) do
    	i=0;
	    while (i<=9) do
	      	if ([DISK_MAP_TABLE + process*10 + i] == R2) then
		        alias ptbr R5; //ptbr of the process
		        ptbr = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20;
		        
		        if([ptbr + i*2 + 1] == '0100' || [ptbr + i*2 + 1] == '1100' ) then
		            R0 = [ptbr + i*2]; //Return the page number
		            
		            //Increment memory free list(page is being shared by another process) 
		            [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1; 
		            return;
          		endif;

      		endif;
      		i=i+1;
    	endwhile;
    	process=process+1;
  	endwhile;

  	print("sude");
  	//get_free_page(NIL)==>free page number
	multipush(R0,R1,R2,R3,R4,R5);
	functionNum = 1;
	call MOD_2;
	multipop(R0,R1,R2,R3,R4,R5);

	print("nikh");
	//disk_load(PID, Page Number, Block Number)==>NIL
	multipush(R0,R1,R2,R3,R4,R5);
	R4 = R2; //block_number 
	functionNum = 2;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = R0; //return value gets page number from prev call
	call MOD_4;
	multipop(R0,R1,R2,R3,R4,R5);
	print("chaitu");


//Release Block(Block Number, PID)==>NIL//////////////////////////////
else if(functionNum==4)then
	alias block_number R2;
	[DISK_FREE_LIST + R2]=[DISK_FREE_LIST + R2] - 1;
	

endif;
endif;
endif;
endif;

return;