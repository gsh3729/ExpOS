print "userarea";

//Save user stack
alias userSP R8;
userSP = SP;

//Save SP in UPTR
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;

//set up the kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 + [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 12];

//mode flag to syscall no 9
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 9;

//Get the argument from user stack
alias file_name R1;
file_name = [[PTBR + 2 * ((userSP - 4)/512)]*512 + (userSP - 4) % 512];

alias i R2;
alias temp_file_name R3;
alias inode_index R4;
i = 0;

//Searching the memory copy of the inode table for the file
while(i < MAX_FILE_NUM) do
	temp_file_name = [(INODE_TABLE + 16*i) + 1];
	if(temp_file_name == file_name) then
		inode_index = i;
		break;
	endif;
	i = i+1;
endwhile;

//failed to find the inode_index
if(i == MAX_FILE_NUM) then
	alias retVal R10;
	retVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
    [retVal] = -1;
else 
	
	//exit process//////////
	multipush(R8, R1, R2, R3, R4, R10);
	alias functionNum R1;
    alias PID R2;

    functionNum = 3;
    PID = [SYSTEM_STATUS_TABLE + 1];

    // Call the Exit Process function in process manager module
    call MOD_1;
	multipop(R8, R1, R2, R3, R4, R10);
	////////////////////////


	//Get the user area page number
	alias user_area_page_num R6;
	user_area_page_num = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];

	// Reclaim the same page by incrementing the memory free list entry of user area page and decrementing the 
	// MEM_FREE_COUNT field in the system status table
	[MEMORY_FREE_LIST + user_area_page_num] = [MEMORY_FREE_LIST + user_area_page_num] + 1;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

	// set the SP to the start of the user area page to intialize the kernel stack of the new process
	SP = user_area_page_num * 512 - 1;

	//store inode index obtained above in the inode index field in the process table 
	[(PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1]) + 4] = RUNNING;
	[(PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1]) + 7] = inode_index;

	// Allocate new pages 
	PTBR = [(PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1]) + 14];

	//library
	[PTBR+0] = 63;
	[PTBR+1] = "0100";
	[PTBR+2] = 64;
	[PTBR+3] = "0100";

	//stack//////////////////////////////////////////
	multipush(R8, R1, R2, R3, R4, R10, R6);
    functionNum = 1;

    call MOD_2;

	multipop(R8, R1, R2, R3, R4, R10, R6);
    [PTBR + 16] = R0;
    [PTBR + 17] = "0110";

	multipush(R8, R1, R2, R3, R4, R10, R6);
    functionNum = 1;

    call MOD_2;

	multipop(R8, R1, R2, R3, R4, R10, R6);
    [PTBR + 18] = R0;
    [PTBR + 19] = "0110";
	////////////////////////////////////////////////////



	//heap///////////////////////////////////////////////
//	multipush(R8, R1, R2, R3, R4, R10, R6, R7);
//  functionNum = 1;

//  call MOD_2;

//	multipop(R8, R1, R2, R3, R4, R10, R6, R7);
//   [PTBR + 4] = R0;
//   [PTBR + 5] = "0110";

//	multipush(R8, R1, R2, R3, R4, R10, R6, R7);
//  functionNum = 1;

//  call MOD_2;

//	multipop(R8, R1, R2, R3, R4, R10, R6, R7);
//  [PTBR + 6] = R0;
//  [PTBR + 7] = "0110";
	////////////////////////////////////////////////////


	//heap/////////////////////////////////////////////
	[PTBR + 4]=-1;
	[PTBR + 5]="0000";

  	[PTBR + 6]=-1;
  	[PTBR + 7]="0000";
  	//////////////////////////////////////////////////////




	//code/////////////////////////////////////////////////////////////////////////
	alias k R10;
	alias page_number R9;
	page_number = 8;
	k = 8;
	while(k <= 11) do
		if([(INODE_TABLE + 16*inode_index) + k] != -1) then
			print("ind");
			if(k == 8) then
				print("jas");
				multipush(R10, R9, R8, R1, R2, R3, R4, R10, R6, R7);
				functionNum = 5;
				call MOD_2; //get code page
				multipop(R10, R9, R8, R1, R2, R3, R4, R10, R6, R7);

				[PTBR + page_number] = R0;
				[PTBR + page_number+1] = "0100";
			endif;
		endif;
		if(k != 8) then
			[PTBR + page_number] = -1;
			[PTBR + page_number+1] = "0000";
			print("vamsi");
		endif;
		k = k + 1;
		page_number = page_number + 2;
	endwhile;
	///////////////////////////////////////////////////////////////////////////////

	print("code over");

	// initialize per process resource table for this process//////////////////////
	alias index R9;
	//last 16 words of user area page
	index = user_area_page_num * 512 + (512 - 16);
	i = 0;
	while(i < 16) do   
		[index] = -1;
		index = index + 1;
		i = i + 1;
	endwhile;
	///////////////////////////////////////////////////////////////////////////////


	//Initialize the disk map table of the process/////////////////////////////
	R10 = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10;
	[R10]=-1;    //User Area in disk
	[R10+1]=-1;  //Unused
	[R10+2]=-1;  //Heap 1 in disk	
	[R10+3]=-1;  //Heap 2 in disk	
	[R10+4]=[INODE_TABLE + inode_index*16 + 8]; //Code 1 in disk	
	[R10+5]=[INODE_TABLE + inode_index*16 + 9]; //Code 2 in disk	
	[R10+6]=[INODE_TABLE + inode_index*16 + 10];//Code 3 in disk	
	[R10+7]=[INODE_TABLE + inode_index*16 + 11];//Code 4 in disk	
	[R10+8]=-1; //Stack Page 1 in disk
	[R10+9]=-1; //Stack Page 2 in disk
	////////////////////////////////////////////////////////////////////////////


	//user stack 
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = 8*512;
	
	//Store the entry point IP  //PTBR+16 is stack //PTBR+8 is code
	[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];

	//modeflag to 0
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;

	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	print("bf iret");
	ireturn;
endif;

//modeflag to 0
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
//sp to user stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];

print "int9done";
ireturn;







	

	

	

	

