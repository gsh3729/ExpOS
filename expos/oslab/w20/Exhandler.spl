[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9]=-1;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
backup;
multipush(EIP);
PTLR=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 15];
if (EC!=0 || [PROCESS_TABLE +([SYSTEM_STATUS_TABLE+1] * 16)+13]==PTLR*512-1) then
	print("Error");
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R13);
    R1=3;
    R2=[SYSTEM_STATUS_TABLE+1];
    call MOD_1;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R13);
    call MOD_5;
    return;
endif;

//page corresponds to a code page
if (4<=EPN && EPN<8) then
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R13);
	R1=5;
	R2=[DISK_MAP_TABLE +[SYSTEM_STATUS_TABLE+1]*10+ EPN];
	call MOD_2;
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2]=R0;
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2+1]="1100";
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R13);

//page corresponds to a heap page
else
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R13);
	R1=1;
	call MOD_2;
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2]=R0;
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2+1]="1110";
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R13);
endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;
multipop(EIP);
restore;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
SP=SP+1;
[[PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + 2*SP /512]* 512 +SP%512]=EIP;
ireturn;