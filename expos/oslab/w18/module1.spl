alias functionNumber R1;
alias currentPID R2;
print "mod1";
// Free User Area Page(pid)//////////////////////////////////////////////////////
if(functionNumber == 2) then

	// obtain the user area page number from the process table entry
	alias user_area_page_num R3; 
	user_area_page_num = [(PROCESS_TABLE + 16*currentPID) + 11];

	//release userpage(page number)////////
	multipush(R1, R2, R3);

	functionNumber = 2;
	R2 = user_area_page_num;
	call MOD_2;

	multipop(R1, R2, R3);
	////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

// Exit Process(pid)///////////////////////////////////////////////////////////
else if(functionNumber == 3) then

	// Invoking the Free Page Table function
	multipush(R1, R2, R3);
	functionNumber = 4;
	call MOD_1;
	multipop(R1, R2, R3);

	// Invoking the Free user Area Page function
	multipush(R1, R2, R3);
	functionNumber = 2;
	call MOD_1;
	multipop(R1, R2, R3);

	// set the state of the process as TERMINATED and return to the caller
	[(PROCESS_TABLE + 16*currentPID) + 4] = TERMINATED;

/////////////////////////////////////////////////////////////////////////////////

// Free Page Table(pid)	/////////////////////////////////////////////////////
else if(functionNumber == 4) then

	alias ptbr R4;
	alias i R5;
	ptbr = [(PROCESS_TABLE + 16*currentPID) + 14];
	
	// invalidate the page table entries for the library pages
	[ptbr+0] = -1;
	[ptbr+1] = "0000";
	[ptbr+2] = -1;
	[ptbr+3] = "0000";

	i = 4;

	// For each valid entry in the page table, release page by the Release Page function and invalidate the entry
	while(i < 20) do
		
		if([ptbr + i] != -1) then
			// invoking the Release Page function
			multipush(R1, R2, R3, R4, R5);
		
			functionNumber = 4;
			R2 = [ptbr + i];
			call MOD_2;
		
			multipop(R1, R2, R3, R4, R5);
			[ptbr + i] = -1;
		endif;

		[ptbr + (i+1)] = "0000";
		i = i + 2;

	endwhile;
////////////////////////////////////////////////////////////////////////////////
endif;
endif;
endif;

return;