print "int14"; 
alias systemNum R14;
alias userSP R15;

//userSP-5 is the position that stores the system call number
userSP = SP;
systemNum = [([PTBR + 2 * ((userSP - 5) / 512) ] * 512 )  + ((userSP - 5) % 512)];

//this is to switch to the kernel stack
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16 + 13)] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16 + 11)] * 512 - 1;


//this is for the semlock system call
if (systemNum == 19) then
    
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = systemNum;

    alias semID R13;
    alias semDes R6;
    semDes = [([PTBR + 2 * ((userSP - 4) / 512) ] * 512 )  + ((userSP - 4) % 512)];

    alias per_process R12;
    per_process = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 11] * 512 + 512 - 16;
    
    if (semDes < 0 || semDes > 7 || [per_process + (semDes*2)] != 1) then 
        
        [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = -1;
        [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    semID = [per_process + (semDes*2) + 1];

    while (([SEMAPHORE_TABLE + semID * 4] != -1) && ([SEMAPHORE_TABLE + semID * 4] != [SYSTEM_STATUS_TABLE + 1]) ) do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_SEMAPHORE;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 5] = semID;

        //invoke the scheduler        
        multipush (R6, R10 , R11 , R12 , R13 , R14,  R15);
        call MOD_5;
        multipop (R6, R10 , R11 , R12 , R13 , R14 , R15);

    endwhile;
    
    [SEMAPHORE_TABLE + semID * 4] = [SYSTEM_STATUS_TABLE + 1];

    [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = 0;

endif;

//for the sem unlock
if (systemNum == 20) then

    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = systemNum;

    alias semID R13;
    alias semDes R6;
    semDes = [([PTBR + 2 * ((userSP - 4) / 512) ] * 512 )  + ((userSP - 4) % 512)];

    alias per_process R12;
    per_process = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 11] * 512 + 512 - 16;

    if(semID < 0 || semID > 7 || [per_process + (2*semDes)] != 1) then
        [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = -1;
        [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    semID = [per_process + (semDes*2) + 1];

    if ([SEMAPHORE_TABLE +  (4*semID)] != -1) then
        
        if ([SEMAPHORE_TABLE + 4 * semID] != [SYSTEM_STATUS_TABLE + 1]) then
            [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = -2;
            [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
            SP = userSP;
            ireturn; 
        endif;

        [SEMAPHORE_TABLE + 4 * semID] = -1;         //locking pid to -1
        alias counter R4;
        counter = 0;
        while (counter < 16) do
            if ([PROCESS_TABLE + counter * 16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + counter * 16 + 5] == semID) then
                [PROCESS_TABLE + counter * 16 + 4] = READY;
            endif;
            counter = counter + 1;
        endwhile;
    endif;

    [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = 0;
endif;

//this is after using all the system call
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;   //setting the mode flag
SP = userSP;
print("int14_over");
ireturn;