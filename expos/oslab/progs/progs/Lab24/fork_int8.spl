//FORK
//print("fork");
alias currentPid R4;
alias childPid R7;
alias ptbrChild R8;
alias userSP R10;
alias counter R2;
userSP = SP;
//print(SP);
//print(PTBR);
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
//print([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]);
SP = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512) - 1;
currentPid = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPid *16 + 9] = 8;

//Invoke get pcb entry from process manager module	
multipush(R2, R4, R7, R8, R10);
//print("fork1");
R1 = 1;
call MOD_1;   //call process manager
multipop(R2, R4, R7, R8, R10);

alias physicalAddressRetVal R5;

//print("fork2");
//Process table entry is not available
if(R0 == -1) then
    physicalAddressRetVal = ([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512);
    [physicalAddressRetVal] = -1;
    SP = userSP;                         //setting the user stack
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0; 
    ireturn;
endif;

//Proceed to fork system call
childPid = R0;
ptbrChild = [PROCESS_TABLE + (childPid*16) + 14];

//if heap page is not allocated for parent then invoke getFreePage
counter = 0;
print("heap");
while(counter < 2) do
	if([PTBR + 4 + (counter*2)] == -1) then
		print("allocated");
		// calling get Free Page from Memory Manager
		multipush(R2, R4, R7, R8, R10);
		R1 = 1;
		call MOD_2;
		multipop(R2, R4, R7, R8, R10);
		print(R0);
		[PTBR + 4 + (counter*2)] = R0;
		[PTBR + 4 + (counter*2) + 1] = "0110";
	endif;
	counter = counter + 1;
endwhile;

//Get pages for stack
counter = 0;
while(counter < 2) do 
	// calling get Free Page from Memory Manager
	multipush(R2, R4, R7, R8, R10);
	R1 = 1;
	call MOD_2;
	multipop(R2, R4, R7, R8, R10);
	[ptbrChild + 16 + (counter*2)] = R0;
	[ptbrChild + 16 + (counter*2) + 1] = "0110";
	counter = counter + 1;
endwhile;

//Get page for user area
multipush(R2, R4, R7, R8, R10);
R1 = 1;
call MOD_2;
multipop(R2, R4, R7, R8, R10);

alias pEntry R13;
alias cEntry R14;

pEntry = PROCESS_TABLE + (currentPid * 16);
cEntry = PROCESS_TABLE + (childPid * 16);

[cEntry + 11] =  R0;
print("fork");
print([PROCESS_TABLE + (childPid * 16) + 11]);

//copy userid from parent to child
[cEntry + 3] = [pEntry + 3];

//copy swap_flag(6) from parent to child
[cEntry + 6] = [pEntry + 6];

//copy USER AREA SWAP STATUS(10) from parent to child
[cEntry + 10] = [pEntry + 10];

//copy inode_index(7) from parent to child
[cEntry + 7] = [pEntry + 7];

//copy uptr field(13) from parent to child
[cEntry + 13] = [pEntry + 13];

//Set mode_flag(9), kptr(12) and tick(0) field of child process to 0
[cEntry + 9] = 0;
[cEntry + 12] = 0;
[cEntry + 0] = 0;

//PPID, state of child
[cEntry + 2] = currentPid;
[cEntry + 4] = CREATED;

// copy per process resource table from parent to child
alias i R11;
alias j R12;
i = ([pEntry + 11] * 512) + (496);
j = ([cEntry + 11] * 512) + (496);
counter = 0;
while(counter < 8) do
	if([i] == FILE) then
		[OPEN_FILE_TABLE + (4*[i+1]) + 1] = [OPEN_FILE_TABLE + (4*[i+1]) + 1] + 1;
	endif;
	if([i] == SEMAPHORE) then
		[SEMAPHORE_TABLE + (4*[i+1]) + 1] = [SEMAPHORE_TABLE + (4*[i+1]) + 1] + 1;
	endif;
	[j] = [i];
	[j+1] = [i+1];
	counter = counter + 1;
	j = j + 2;
	i = i + 2;
endwhile;

//copy PER-PROCESS_DISK_MAP_TABLE from parent to child
counter = 0;
while(counter < 10) do
	[DISK_MAP_TABLE + (childPid*10) + counter] = [DISK_MAP_TABLE + (currentPid*10) + counter];
	counter = counter + 1;
endwhile;

//copy heap, code and library entries from parent pageTable to child
counter = 0;
while(counter <= 7) do
	[ptbrChild + (counter*2)] = [PTBR + (counter*2)];
	if([ptbrChild + (counter*2)] != -1) then
		[MEMORY_FREE_LIST + [ptbrChild + (counter*2)]] = [MEMORY_FREE_LIST + [ptbrChild + (counter*2)]] + 1;
	endif;
	[ptbrChild + (counter*2) + 1] = [PTBR + (counter*2) + 1];
	counter = counter + 1;
endwhile;

//Copy content of the user stack pages of the parent to the user stack pages of the child word by word
//PAGE1:
counter = 0;
alias parentSP R3;
alias childSP R9;
parentSP = [PTBR + 16]*512;
childSP = [ptbrChild + 16]*512;

while(counter < 512) do
	[childSP + counter] = [parentSP + counter];
	counter = counter + 1;
endwhile;

//PAGE2:
parentSP = [PTBR + 18]*512;
childSP = [ptbrChild + 18]*512;
counter = 0;
while(counter < 512) do
	[childSP + counter] = [parentSP + counter];
	counter = counter + 1;
endwhile;

//Store BP on top of kernel stack of child Process
[[cEntry + 11]*512] = BP;

//return values
physicalAddressRetVal = ([PTBR + (2 * ((userSP - 1) / 512)) ] * 512 )  + ((userSP - 1) % 512);
[physicalAddressRetVal] = childPid;

physicalAddressRetVal = ([ptbrChild + (2 * ((userSP - 1) / 512)) ] * 512 )  + ((userSP - 1) % 512);
[physicalAddressRetVal] = 0;

//switch SP to user stack of parent process
[pEntry + 9] = 0;
SP = userSP;

ireturn;