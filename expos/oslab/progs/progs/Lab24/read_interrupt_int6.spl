//print "read"; //Read interrupt
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 7;
alias userSP R10;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13] = SP;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 11]*512 -1;
alias fileDesc R1;
alias retVal R5;
retVal = ([PTBR + 2*((userSP - 1)/512)]*512) + ((userSP - 1)%512);

//Save PID of current Process 
alias currentPID R6;
currentPID = [SYSTEM_STATUS_TABLE + 1];

fileDesc = [([PTBR + 2*((userSP - 4)/512)]*512) + (userSP - 4)%512];

if(fileDesc!=-1) then
	if((fileDesc < 0) || (fileDesc > 7)) then
		[retVal] = -1;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	alias user_area_page_num R8;
	user_area_page_num = [PROCESS_TABLE + currentPID*16 + 11];
	alias open_file_entry R9;
	//print("file type");
	//print([(user_area_page_num * 512) + 496 + 2*fileDesc]);

	if([(user_area_page_num * 512) + 496 + 2*fileDesc] == FILE) then
		alias inode_index R14;
		open_file_entry = [user_area_page_num*512 + 496 + 2*fileDesc+1];
		inode_index = [OPEN_FILE_TABLE + 4*open_file_entry];

		//print("acquire inode");
		// calling the acquire_inode() function in the Resource Manager module
		multipush(R1, R14, R5, R6, R8, R9, R10);
		R1 = 4;
		R2 = currentPID;
		R3 = inode_index;
		call MOD_0;
		multipop(R1, R14, R5, R6, R8, R9, R10);

		//print(R0);
		if(R0 == -1) then
			[retVal] = -1;
		else 
			alias lseek R11;
			lseek = OPEN_FILE_TABLE + 4*open_file_entry + 2;

			alias buffer R12;
			buffer = [([PTBR + 2*((userSP - 3)/512)]*512) + ((userSP - 3)%512)];
			//print(buffer);
			buffer = ([PTBR + 2*((buffer/512))]*512) + (buffer % 512);
			//print(buffer);

			if(inode_index == INODE_ROOT) then
				// If the lseek value is equal to the root file size(480), release_inode() return -2. 
				if([lseek] >= 480) then
					multipush(R5, R10);
					R1 = 5;
					R2 = currentPID;
					R3 = inode_index;
					call MOD_0;
					multipop(R5, R10);
					[([PTBR + 2*((userSP - 1)/512)]*512) + ((userSP - 1)%512)] = -2;
					[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
					SP = userSP;
					ireturn;
				else
					[buffer] = [ROOT_FILE + [lseek]];
					[lseek] = [lseek] + 1;
				endif;

			// if file is not a root file
			else 
				// If lseek position is same as the file size, release_inode() and return -2
				//print("lseek");
				//print(inode_index);
				//print([INODE_TABLE + 16*inode_index + 2]);
				//print([lseek]);
				if([INODE_TABLE + 16*inode_index + 2] <= [lseek]) then
					// release inode
					//print("go back");
					multipush(R5, R10);
					R1 = 5;
					R2 = currentPID;
					R3 = inode_index;
					call MOD_0;
					multipop(R5, R10);
					[([PTBR + 2*((userSP - 1)/512)]*512) + ((userSP - 1)%512)] = -2;
					[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
					SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13];
					ireturn;

				else 
					// Read the data from the File Buffer by calling the buffered_read() function in the File Manager module
					multipush(R5, R6, R10, R11, R12, R14);
					R1 = 2;
					R2 = [INODE_TABLE + 16*inode_index + ([lseek]/512) + 8];	// disk block number
					R3 = ([lseek] % 512);		// offset
					R4 = buffer;				// memory address
					call MOD_3;
					multipop(R5, R6, R10, R11, R12, R14);
					[lseek] = [lseek] + 1;
				endif;
			endif;

			// 	Release the Lock on the File by calling the release_inode() function in the Resource Manager module
			multipush(R5, R10);
			R1 = 5;
			R2 = currentPID;
			R3 = inode_index;
			call MOD_0;
			multipop(R5, R10);
			[retVal] = 0;
		endif;
	else 
		[retVal] = -1;
	endif;
else 
	alias word R3;
	word =  [ [PTBR + (2*((userSP - 3)/512))]*512 + ((userSP - 3)%512)];
	// call terminal read
	multipush(R1, R2, R3, R6, R10);
	R1 = 4;
	R2 = currentPID;
	call MOD_4;
	multipop(R1, R2, R3, R6, R10);
	[([PTBR + 2*((userSP - 1)/512)]*512) + (userSP - 1)%512] = 0;
endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
SP = userSP;

ireturn;